# -*- coding: utf-8 -*-
"""Nutrimeal AI.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Y_eVda0hFCpz7MOpvLfP5Tjev2LY4uqz

### **NutriMeal AI**
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import random
import streamlit as st
st.write("App started...")


# Load data
df = pd.read_csv("foods.csv")
if 'Unnamed: 0' in df.columns:
    df = df.drop(columns=['Unnamed: 0'])

# Konversi energi dan pastikan semua numerik
df['Energy (kcal)'] = df['Energy (kJ)'] * 0.239006
df.drop(columns=['Energy (kJ)'], inplace=True)
nutrient_cols = df.columns.drop('Menu')
df[nutrient_cols] = df[nutrient_cols].apply(pd.to_numeric, errors='coerce')
df.dropna(inplace=True)

def get_user_input():
    print("👋 Selamat datang di NutriMeal AI!\n")
    name = input("👤 Nama kamu: ")
    goal = input("🎯 Tujuan kamu hari ini? (diet / bulking / maintain): ").strip().lower()
    try:
        calories = int(input("🔥 Target kalori kamu hari ini (contoh: 1600): ").strip())
    except:
        calories = 2000
    try:
        meal_count = int(input("🍽️ Ingin berapa kali makan hari ini? (contoh: 3): ").strip())
    except:
        meal_count = 3
    diet_type = input("🥦 Preferensi diet? (normal / vegetarian / vegan / halal): ").strip().lower()
    allergies = input("🚫 Bahan yang ingin dihindari? (pisahkan dengan koma atau ketik 'tidak ada'): ").lower()
    allergy_list = [a.strip() for a in allergies.split(",")] if allergies != 'tidak ada' else []
    return name, goal, calories, meal_count, diet_type, allergy_list

def get_user_input():
    print("👋 Selamat datang di NutriMeal AI!\n")
    name = input("👤 Nama kamu: ")
    goal = input("🎯 Tujuan kamu hari ini? (diet / bulking / maintain): ").strip().lower()
    try:
        calories = int(input("🔥 Target kalori kamu hari ini (contoh: 1600): ").strip())
    except:
        calories = 2000
    try:
        meal_count = int(input("🍽️ Ingin berapa kali makan hari ini? (contoh: 3): ").strip())
    except:
        meal_count = 3
    diet_type = input("🥦 Preferensi diet? (normal / vegetarian / vegan / halal): ").strip().lower()
    allergies = input("🚫 Bahan yang ingin dihindari? (pisahkan dengan koma atau ketik 'tidak ada'): ").lower()
    allergy_list = [a.strip() for a in allergies.split(",")] if allergies != 'tidak ada' else []
    return name, goal, calories, meal_count, diet_type, allergy_list

def filter_data(df, diet, allergies):
    filtered = df.copy()
    for allergen in allergies:
        filtered = filtered[~filtered['Menu'].str.contains(allergen, case=False, na=False)]

    # Bisa tambahkan logika diet_type nanti (misal vegan, halal)
    return filtered

def generate_menu(df, total_calories, meals):
    for _ in range(1000):
        temp = df.sample(meals)
        total = temp['Energy (kcal)'].sum()
        if total_calories - 300 <= total <= total_calories + 300:
            return temp, total
    return None, 0

def plot_macronutrients(menu_df):
    nutrients = ['Protein (g)', 'Fat (g)', 'Carbohydrates (g)']
    summary = menu_df[nutrients].sum()

    plt.figure(figsize=(6,4))
    sns.barplot(x=summary.index, y=summary.values, palette='viridis')
    plt.title("Total Makronutrien")
    plt.ylabel("Gram")
    plt.xticks(rotation=0)
    plt.tight_layout()
    plt.show()

def plot_micronutrients(menu_df):
    micronutrients = ['Vitamin A (mg)', 'Vitamin C (mg)', 'Iron (mg)', 'Calcium (mg)', 'Magnesium (mg)', 'Phosphorus (mg)']
    summary = menu_df[micronutrients].sum()

    fig = px.line_polar(r=summary.values, theta=summary.index, line_close=True,
                        title="Radar Mikronutrien", template="plotly_dark")
    fig.show()

def cek_keseimbangan(menu_df):
    p, f, c = menu_df['Protein (g)'].sum(), menu_df['Fat (g)'].sum(), menu_df['Carbohydrates (g)'].sum()
    total = p * 4 + f * 9 + c * 4
    print(f"Keseimbangan Kalori:\nProtein: {p*4/total*100:.1f}% | Lemak: {f*9/total*100:.1f}% | Karbo: {c*4/total*100:.1f}%")

def tips_kesehatan():
    tips = [
        "Minum air sebelum makan bisa bantu mengontrol porsi.",
        "Jangan lupakan protein setiap kali makan.",
        "Serat penting untuk pencernaan, makan sayur dan buah!",
        "Kurangi minuman manis, perbanyak air putih.",
        "Makanlah perlahan agar tubuh punya waktu merasa kenyang."
    ]
    return random.choice(tips)

# Ambil input
name, goal, calories, meal_count, diet_type, allergy_list = get_user_input()

# Filter dan generate menu
filtered_df = filter_data(df, diet_type, allergy_list)
menu_df, total_kal = generate_menu(filtered_df, calories, meal_count)

# Output
if menu_df is not None:
    print(f"\n🍱 Rekomendasi Menu untuk {name}:")
    print(menu_df[['Menu', 'Energy (kcal)', 'Protein (g)', 'Fat (g)', 'Carbohydrates (g)']])
    print(f"\n🔥 Total Kalori: {total_kal:.2f} kcal\n")

    plot_macronutrients(menu_df)
    plot_micronutrients(menu_df)
    cek_keseimbangan(menu_df)
else:
    print("❌ Gagal menemukan kombinasi menu yang sesuai. Coba ubah preferensi atau jumlah makan.")

# Tips harian
print("\n💡 Tips Hari Ini:")
print(tips_kesehatan())

def distribusi_makan(menu_df):
    bagian = ['Sarapan', 'Makan Siang', 'Makan Malam']
    menu_df = menu_df.copy()
    menu_df['Waktu'] = [bagian[i % 3] for i in range(len(menu_df))]
    return menu_df

menu_df = distribusi_makan(menu_df)
for waktu, group in menu_df.groupby("Waktu"):
    print(f"\n🍽️ {waktu}")
    print(group[['Menu', 'Energy (kcal)']])

def skor_gizi(menu_df):
    protein = menu_df['Protein (g)'].sum()
    fat = menu_df['Fat (g)'].sum()
    carb = menu_df['Carbohydrates (g)'].sum()
    fiber = menu_df['Dietary Fiber (g)'].sum()

    # Skor berdasarkan ideal WHO range (kasar)
    score = 0
    if 10 <= (protein * 4) / (protein * 4 + fat * 9 + carb * 4) * 100 <= 35:
        score += 30
    if 20 <= (fat * 9) / (protein * 4 + fat * 9 + carb * 4) * 100 <= 35:
        score += 30
    if fiber >= 20:
        score += 20
    if menu_df['Vitamin C (mg)'].sum() > 60:
        score += 20

    return min(score, 100)

def simpan_menu(menu_df, nama):
    filename = f"Menu_{nama}.csv"
    menu_df.to_csv(filename, index=False)
    print(f"📁 Menu telah disimpan sebagai {filename}")

def ganti_menu(menu_df, original_menu, df_all):
    try:
        idx = menu_df[menu_df['Menu'].str.lower() == original_menu.lower()].index[0]
        replacement = df_all.sample(1)
        menu_df.loc[idx] = replacement.iloc[0]
        return menu_df
    except:
        print("❌ Menu tidak ditemukan.")
        return menu_df

faq = {
    "protein": "Protein penting untuk membangun otot dan memperbaiki sel tubuh.",
    "lemak": "Lemak dibutuhkan untuk hormon, tapi harus dibatasi.",
    "karbohidrat": "Karbo adalah sumber energi utama tubuh.",
    "serat": "Serat membantu pencernaan dan mencegah sembelit.",
}

def chatbot_gizi(pertanyaan):
    for kata_kunci in faq:
        if kata_kunci in pertanyaan.lower():
            return faq[kata_kunci]
    return "Maaf, saya belum punya informasi tentang itu."

def hitung_kalori(jk, usia, tinggi, berat, aktivitas):
    if jk == 'pria':
        bmr = 10*berat + 6.25*tinggi - 5*usia + 5
    else:
        bmr = 10*berat + 6.25*tinggi - 5*usia - 161

    level_aktivitas = {
        'rendah': 1.2,
        'sedang': 1.55,
        'tinggi': 1.9
    }
    return int(bmr * level_aktivitas.get(aktivitas, 1.2))

from IPython.display import Image, display

def tampilkan_menu_visual(menu_df):
    for i, row in menu_df.iterrows():
        print(row['Menu'])
        display(Image(row['Image_URL']))  # pastikan kolom gambar ada di CSV

def pie_kalori(menu_df):
    p = menu_df['Protein (g)'].sum() * 4
    f = menu_df['Fat (g)'].sum() * 9
    c = menu_df['Carbohydrates (g)'].sum() * 4

    plt.pie([p, f, c], labels=["Protein", "Lemak", "Karbo"], autopct='%1.1f%%', colors=['skyblue', 'orange', 'lightgreen'])
    plt.title("Komposisi Energi Menu")
    plt.show()

kuis = [
    {"soal": "Vitamin C banyak terdapat di buah?", "jawaban": "jeruk"},
    {"soal": "Makronutrien utama untuk otot?", "jawaban": "protein"},
]

def tampilkan_kuis():
    soal = random.choice(kuis)
    jawaban = input(soal["soal"] + " ➜ ").lower()
    if jawaban == soal["jawaban"]:
        print("✅ Benar!")
    else:
        print(f"❌ Salah. Jawaban: {soal['jawaban']}")

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import random

# ========== LOAD CSV ==========
df = pd.read_csv('foods.csv')
if 'Unnamed: 0' in df.columns:
    df = df.drop(columns=['Unnamed: 0'])
df['Energy (kcal)'] = df['Energy (kJ)'] * 0.239006
nutrient_cols = df.columns.drop(['Menu'])
df[nutrient_cols] = df[nutrient_cols].apply(pd.to_numeric, errors='coerce')
df = df.dropna().reset_index(drop=True)

# ========== KALKULATOR KALORI ==========
def hitung_kalori(jk, usia, tinggi, berat, aktivitas):
    if jk == 'pria':
        bmr = 10 * berat + 6.25 * tinggi - 5 * usia + 5
    else:
        bmr = 10 * berat + 6.25 * tinggi - 5 * usia - 161
    level = {'rendah': 1.2, 'sedang': 1.55, 'tinggi': 1.9}
    return int(bmr * level.get(aktivitas, 1.2))

# ========== INPUT USER ==========
print("👋 Selamat datang di NutriMeal AI!")
name = input("Nama kamu: ")
jk = input("Jenis kelamin (pria/wanita): ").lower()
usia = int(input("Usia kamu (tahun): "))
tinggi = int(input("Tinggi badan (cm): "))
berat = int(input("Berat badan (kg): "))
aktivitas = input("Tingkat aktivitas (rendah/sedang/tinggi): ").lower()
goal = input("Tujuan kamu hari ini? (diet / bulking / maintain): ").strip().lower()
meal_count = int(input("Ingin berapa kali makan hari ini? "))
allergies = input("Ada bahan yang ingin dihindari? (pisahkan dengan koma / ketik 'tidak ada'): ").lower()
allergy_list = [a.strip() for a in allergies.split(",")] if allergies != 'tidak ada' else []

# ========== HITUNG KALORI ==========
kalori_target = hitung_kalori(jk, usia, tinggi, berat, aktivitas)
if goal == 'diet':
    kalori_target -= 400
elif goal == 'bulking':
    kalori_target += 300
print(f"\n🎯 Target kalori harian kamu: {kalori_target} kcal")

# ========== PILIH MENU ==========
def generate_menu(df, total_calories, meals, allergies):
    filtered = df.copy()
    for allergen in allergies:
        filtered = filtered[~filtered['Menu'].str.contains(allergen, case=False, na=False)]
    selected = []
    for _ in range(1000):
        if len(filtered) < meals:
            break
        temp = filtered.sample(meals)
        cal_sum = temp['Energy (kcal)'].sum()
        if total_calories - 300 <= cal_sum <= total_calories + 300:
            selected = temp
            break
    if selected != []:
        return selected, cal_sum
    else:
        return None, 0

menu, kalori_total = generate_menu(df, kalori_target, meal_count, allergy_list)

if menu is not None:
    print("\n🍽️ Rekomendasi Menu Harian:")
    print(menu[['Menu', 'Energy (kcal)', 'Protein (g)', 'Fat (g)', 'Carbohydrates (g)']])
    print(f"\nTotal Kalori Menu: {kalori_total:.2f} kcal")
else:
    print("⚠️ Tidak ditemukan kombinasi menu yang sesuai.")

# ========== PLOT PIE KALORI ==========
def pie_kalori(menu_df):
    p = menu_df['Protein (g)'].sum() * 4
    f = menu_df['Fat (g)'].sum() * 9
    c = menu_df['Carbohydrates (g)'].sum() * 4
    plt.figure(figsize=(5,5))
    plt.pie([p, f, c], labels=["Protein", "Lemak", "Karbo"], autopct='%1.1f%%', colors=['skyblue', 'orange', 'lightgreen'])
    plt.title("Komposisi Energi Menu")
    plt.show()

if menu is not None:
    pie_kalori(menu)

# ========== TIPS KESEHATAN ==========
def tampilkan_tips_kesehatan():
    tips = [
        "💧 Minum cukup air putih minimal 8 gelas sehari.",
        "🥗 Jangan lupakan sayur dan buah setiap hari.",
        "🏃‍♂️ Bergeraklah setiap 1 jam, walau hanya 5 menit.",
        "😴 Tidur cukup 7-9 jam untuk regenerasi tubuh.",
        "🧠 Hindari multitasking saat makan, fokus pada rasa."
    ]
    print("\n💡 Tips Kesehatan Hari Ini:")
    print(random.choice(tips))

tampilkan_tips_kesehatan()

# ========== KUIS NUTRISI ==========
def tampilkan_kuis():
    kuis = [
        {"soal": "Vitamin C banyak terdapat di buah apa?", "jawaban": "jeruk"},
        {"soal": "Makronutrien utama untuk otot?", "jawaban": "protein"},
        {"soal": "Apa sumber karbohidrat utama di Indonesia?", "jawaban": "nasi"},
    ]
    soal = random.choice(kuis)
    jawaban = input(f"\n❓ Kuis Gizi: {soal['soal']} ➜ ").strip().lower()
    if jawaban == soal["jawaban"]:
        print("✅ Benar!")
    else:
        print(f"❌ Salah. Jawaban yang benar: {soal['jawaban']}")

tampilkan_kuis()
